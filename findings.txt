The service response is the following:
[
  {
    "ips": [
      "172.23.0.3",
      "fe80::42:acff:fe17:3%86"
    ],
    "processes": [
      "dotnet"
    ],
    "uptime": "01:06:03.3960000",
    "freeSpace": "992378560512"
  },
  {
    "ips": [
      "172.23.0.2"
    ],
    "processes": [
      "npm run start",
      "sh",
      "node"
    ],
    "uptime": "1 hour 6 minutes 3.4099999999998545 seconds",
    "freeSpace": "1047370915840"
  }
]

From the experiment I will divide each finding based type of information:
    - IPs: It is clear that Docker compose creates an internal virtual network for each compose file.
        Inside of this network communication is possible and the access to the outside is also possible,
        however, access from the outside to the container is explicitly defined using the port mapping.
    - Process: Process inside the docker container seem to only be able to discover other processes
        inside the container.
    - Uptime: This information seemed to be shared with the host, as this command shows host uptime.
    - Free space: If want to answer the question of "what does the container share with the OS in
         terms of storage", it doesn't share files by default unless we use volumes or mounts, which
         we are not using in this case because we don't have any write operation needed. 
        As for the amount of free space in my experiment, we are in fact probing into what is called
         "container's writable layer" (based on my recent findings) which is a temporary file storage
         inside the container. However, the results are a bit odd because my computer only has 476GB
         of total storage (as windows report). This odd number might be cause by 
         WSL(windows subsystem for linux).